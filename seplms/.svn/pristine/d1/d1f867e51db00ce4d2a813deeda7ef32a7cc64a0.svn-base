package kr.happyjob.study.mngstd.controller;

import java.io.File;
import java.net.URLEncoder;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.PostConstruct;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.io.FileUtils;
import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.google.gson.Gson;

import kr.happyjob.study.mngadm.model.LectureModel;
import kr.happyjob.study.mngins.model.HwkFileModel;
import kr.happyjob.study.mngins.model.HwkModel;
import kr.happyjob.study.mngstd.model.SmFileModel;
import kr.happyjob.study.mngstd.model.SubmitHwkModel;
import kr.happyjob.study.mngstd.service.SubmittedWorkService;


@Controller
@RequestMapping("/std/")
public class SubmittedWorkController {
	
	@Autowired
	SubmittedWorkService smWorkService;
	
	private final Logger logger = LogManager.getLogger(this.getClass());

	// Get class name for logger
	private final String className = this.getClass().toString();

	
	/** 관제제출 초기 화면
	 * @return view jsp
	 * @author 김정욱
	 */
	@RequestMapping("submittedWork.do")
	public String submittedWork(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
			HttpServletResponse response, HttpSession session) throws Exception {
		
		logger.info("+ Start " + className + ".submittedWork");
		logger.info("   - paramMap : " + paramMap);

		logger.info("+ end " + className + ".submittedWork");

		return "mngstd/submittedWork";
		
	}
	
	
	/** 강의 정보 조회
	 * @return 강의정보(LectureModel: mngadm.model)
	 * @author 김정욱
	 */
	@ResponseBody
	@RequestMapping("findLecInfo.do")
	public LectureModel findLecInfo(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
			HttpServletResponse response, HttpSession session) throws Exception {
		
		logger.info("+ Start " + className + ".findLecInfo");
		logger.info("   - paramMap : " + paramMap);
		
		// 학생 아이디를 통한 강의 조회
		paramMap.put("loginID", session.getAttribute("loginId").toString());
		LectureModel lecturModel = smWorkService.findLecInfo(paramMap);
		
		logger.info("+ end " + className + ".findLecInfo");

		return lecturModel;
		
	}
	
	
	/** 과제 목록 조회
	 * @return view jsp
	 * @author 김정욱
	 */
	@RequestMapping("findHwkList.do")
	public String findHwkList(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
			HttpServletResponse response, HttpSession session) throws Exception {
		
		logger.info("+ Start " + className + ".findHwkList");
		logger.info("   - paramMap : " + paramMap);
		
		// 강사가 제시한 과제 리스트
		List<HwkModel> hwkList = smWorkService.findHwkList(paramMap);
		int totalcnt = hwkList.size();
		
		// 학생이 제출한 과제 리스트
		paramMap.put("loginID", session.getAttribute("loginId").toString());
		List<Integer> smHwkList = smWorkService.findSmHwkList(paramMap);
		
		// 학생이 제출한 과제에 맞춰 강사가 제시한 과제 리스트의 과제명 변경
		for(int i = 0; i < hwkList.size(); i++){
			if(smHwkList.contains(hwkList.get(i).getHwk_no())){
				String newNm = hwkList.get(i).getHwk_nm().toString() + "(완료)";
				hwkList.get(i).setHwk_nm(newNm);
			}
		}
		
		Gson gson = new Gson();
		String hwkListJS = gson.toJson(hwkList);
		
		model.addAttribute("hwkList", hwkList);
		model.addAttribute("totalcnt", totalcnt);
		model.addAttribute("hwkListJS", hwkListJS);
		
		logger.info("+ end " + className + ".findHwkList");

		return "mngstd/stdHwkList";
		
	}
	
	
	/**
	 * 첨부파일 다운로드
	 */
	@RequestMapping("hwkFiledownload.do")
	public void hwkFiledownload(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
			HttpServletResponse response, HttpSession session) throws Exception {
	
		logger.info("+ Start " + className + ".hwkFiledownload");
		logger.info("   - paramMap : " + paramMap);
		
		// 첨부파일 조회
		HwkFileModel fileInfo = smWorkService.hwkFileInfo(paramMap);
		
		byte fileByte[] = FileUtils.readFileToByteArray(new File(fileInfo.getHwk_path()));
		
		response.setContentType("application/octet-stream");
	    response.setContentLength(fileByte.length);
	    response.setHeader("Content-Disposition", "attachment; fileName=\"" + URLEncoder.encode(fileInfo.getHwk_file_nm(),"UTF-8")+"\";");
	    response.setHeader("Content-Transfer-Encoding", "binary");
	    response.getOutputStream().write(fileByte);
	     
	    response.getOutputStream().flush();
	    response.getOutputStream().close();

		logger.info("+ End " + className + ".hwkFiledownload");
	}
	
	
	/** 과제 저장하기
	 * @return 성공 여부
	 * @author 김정욱
	 */
	@ResponseBody
	@RequestMapping("saveHwk.do")
	public Map<String, Object> saveHwk(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
			HttpServletResponse response, HttpSession session) throws Exception {
		
		logger.info("+ Start " + className + ".saveHwk");
		logger.info("   - paramMap : " + paramMap);
	
		String msg = null;
		String action = paramMap.get("action").toString();
		
		paramMap.put("loginID", session.getAttribute("loginId").toString());
		
		// 신규 저장
		if(action.equals("I")){
			msg = smWorkService.insertHwk(paramMap,request);
		
		// 과제 갱신	
		} else if(action.equals("U")){
			msg = smWorkService.updateHwk(paramMap,request);
			
		// 과제 삭제	
		} else {
			msg = smWorkService.deleteHwk(paramMap,request);
		}
		
		Map<String, Object> returnMap = new HashMap<>();
		returnMap.put("msg", msg);
		
		logger.info("+ end " + className + ".saveHwk");

		return returnMap;
		
	} 
	
	
	/** 과제 제출 여부 조회
	 * @return 제출과제정보(SubmitHwkModel)
	 * @author 김정욱
	 */
	@ResponseBody
	@RequestMapping("findHwkSm.do")
	public Map<String, Object> findHwkSm(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
			HttpServletResponse response, HttpSession session) throws Exception {
		
		logger.info("+ Start " + className + ".findHwkSm");
		logger.info("   - paramMap : " + paramMap);
	
		
		paramMap.put("loginID", session.getAttribute("loginId").toString());
		
		SubmitHwkModel smHwkModel = smWorkService.findHwkSm(paramMap);
		
		Map<String, Object> returnMap = new HashMap<>();
		returnMap.put("smHwkModel", smHwkModel);

		// 과제를 제출했다면, 제출한 파일 정보 불러오기
		if(smHwkModel != null){
			SmFileModel smFileInfo = smWorkService.findSmFileInfo(smHwkModel.getSm_file_no());
			returnMap.put("smFileInfo", smFileInfo);
		}
		
		logger.info("+ end " + className + ".findHwkSm");

		return returnMap;
		
	} 
	
	
	/**
	 * 제출한 첨부파일 다운로드
	 */
	@RequestMapping("smFiledownload.do")
	public void smFiledownload(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
			HttpServletResponse response, HttpSession session) throws Exception {
	
		logger.info("+ Start " + className + ".smFiledownload");
		logger.info("   - paramMap : " + paramMap);
		
		// 첨부파일 조회
		int sm_file_no = Integer.parseInt(paramMap.get("sm_file_no").toString());
		SmFileModel smFileInfo = smWorkService.findSmFileInfo(sm_file_no);
		
		byte fileByte[] = FileUtils.readFileToByteArray(new File(smFileInfo.getSm_file_path()));
		
		response.setContentType("application/octet-stream");
	    response.setContentLength(fileByte.length);
	    response.setHeader("Content-Disposition", "attachment; fileName=\"" + URLEncoder.encode(smFileInfo.getSm_file_nm(),"UTF-8")+"\";");
	    response.setHeader("Content-Transfer-Encoding", "binary");
	    response.getOutputStream().write(fileByte);
	     
	    response.getOutputStream().flush();
	    response.getOutputStream().close();

		logger.info("+ End " + className + ".smFiledownload");
	}
}
