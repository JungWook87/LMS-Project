<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.happyjob.study.jobadm.dao.ResDao">

	<!-- 장비사항 목록 조회 -->
	<select id = "listRes" resultType = "kr.happyjob.study.jobadm.model.ResModel">
			/*kr.happy.study.jobadm.dao.ResDao.listRes*/
			SELECT  ui.loginID
			      , ui.user_type
			      , ui.name
			      , ui.sex
			      , ui.hp
			      , ui.email
			      , ui.regdate
			      , ui.addr
			      , ui.birthday
			      , ui.lecture
			      , ui.status_yn
			      , ui.secession_date
			      , ui.secession
			      , res.portfolio
			      , res.introduce
			      , res.skills
	              , CASE
			         WHEN res.portfolio IS NULL AND res.introduce IS NULL AND res.skills IS NULL THEN '미입력 상태'
			         ELSE '입력 완료'
			        END as res_status
			      , job.ctg_nm
			FROM    tb_userinfo ui
			LEFT JOIN tb_resume res ON ui.loginID = res.loginID
			LEFT JOIN tb_std_job job ON ui.loginID = job.loginID
			WHERE ui.user_type = 'A'
			AND   ui.secession != "Y"
			<if test="(searchText != null) and (!searchText.equals(''))">
				<choose>
					<when test="searchSel eq 'title'.toString()">
						and ui.name Like CONCAT('%', #{searchText}, '%')
					</when>
					<when test="searchSel eq 'ID'.toString()">
						and ui.loginID Like CONCAT('%', #{searchText}, '%')
					</when>
					<when test="searchSel eq 'skill'.toString()">
						and res.skills Like CONCAT('%', #{searchText}, '%')
					</when>
					<otherwise>
						and (ui.name Like CONCAT('%', #{searchText}, '%')
						or ui.loginID Like CONCAT('%', #{searchText}, '%')
						or res.skills Like CONCAT('%', #{searchText}, '%')	)
					</otherwise>
				</choose>
			</if>
		order by ui.regdate DESC
		LIMIT #{startPoint}, #{pageSize}
	</select> <!-- 8.셀렉문으로 셀렉 -->
	
		
	<!-- 학생 목록 총 갯수 조회 -->
	<select id="totalCnt" resultType="int">
		/*kr.happy.study.jobadm.dao.ResDao.totalCnt*/
		SELECT COUNT(ui.loginID) as tot_Cnt
		FROM    tb_userinfo ui
		LEFT JOIN tb_resume res ON ui.loginID = res.loginID
		LEFT JOIN tb_std_job job ON ui.loginID = job.loginID
         WHERE user_type = "A"
   		   AND secession != "Y"

			<if test="(searchText != null) and (!searchText.equals(''))">
				<choose>
					<when test="searchSel eq 'title'.toString()">
						and ui.name Like CONCAT('%', #{searchText}, '%')
					</when>
					<when test="searchSel eq 'ID'.toString()">
						and ui.loginID Like CONCAT('%', #{searchText}, '%')
					</when>
					<when test="searchSel eq 'skill'.toString()">
						and res.skills Like CONCAT('%', #{searchText}, '%')
					</when>
					<otherwise>
						and (ui.name Like CONCAT('%', #{searchText}, '%')
						or ui.loginID Like CONCAT('%', #{searchText}, '%')
						or res.skills Like CONCAT('%', #{searchText}, '%')	)
					</otherwise>
				</choose>
			</if>
	</select>	<!-- 10.셀렉문으로 카운터해서 데이터량 정하기 -->
		
 	
 	<!-- 장비사항 단건 조회 : 학생이름 클릭시 -->
	<select id = "selectRes" resultType = "kr.happyjob.study.jobadm.model.ResModel">
		/*kr.happy.study.jobadm.dao.ResDao.selectRes*/
			SELECT  ui.loginID
			      , ui.user_type
			      , ui.name
			      , ui.sex
			      , ui.hp
			      , ui.email
			      , ui.regdate
			      , ui.addr
			      , ui.birthday
			      , ui.lecture
			      , ui.status_yn
			      , ui.secession_date
			      , ui.secession
			      , res.portfolio
			      , res.introduce
			      , res.skills
	              , CASE
			         WHEN res.portfolio IS NULL AND res.introduce IS NULL AND res.skills IS NULL THEN '미입력 상태'
			         ELSE '입력 완료'
			        END as res_status
			      , job.ctg_nm
			FROM    tb_userinfo ui
			LEFT JOIN tb_resume res ON ui.loginID = res.loginID
			LEFT JOIN tb_std_job job ON ui.loginID = job.loginID
		WHERE ui.loginID = #{loginID}    
	</select> 
	
	
	<!-- 학생 이력서 신규(저장)  -->
	<insert id="insertRes" parameterType="Map">
	/*kr.happy.study.jobadm.dao.ResDao.insertRes*/
    INSERT INTO tb_resume
                  (
                   loginID
                 , portfolio
                 , introduce
                 , skills
                  )
                  values (
                      #{loginID}
                     ,#{portfolio}
                     ,#{introduce}
                     ,#{skills}
                  )
	</insert>
	
	<!-- 정보 수정-->
    <update id="updateRes">
	/*kr.happy.study.jobadm.dao.ResDao.updateRes*/
        UPDATE tb_resume
        SET  
              portfolio = #{portfolio}
            , introduce = #{introduce}
            , skills = #{skills}
        WHERE loginID = #{loginID};
    </update>

	<!-- 삭제-->
    <delete id="deleteRes">
    /*kr.happy.study.jobadm.dao.ResDao.deleteRes*/
	    DELETE FROM tb_resume
	     WHERE loginID = #{loginID};
    </delete>   
</mapper>
