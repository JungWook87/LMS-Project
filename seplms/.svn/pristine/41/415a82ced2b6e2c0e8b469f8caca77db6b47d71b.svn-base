<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.happyjob.study.facadm.dao.RoomDao">

	<!-- 장비사항 목록 조회 -->
	<select id = "listRoom" resultType = "kr.happyjob.study.facadm.model.RoomModel">
		SELECT rm.cls_room_cd
		     , rm.cls_room_nm
		     , rm.cls_room_size
		     , rm.cls_room_seat
		     , rm.cls_room_etc
		     , rm.cls_room_use_yn
         	 , COUNT(re.equ_cd) as cnt_equ
		  FROM tb_cls_room rm
	LEFT JOIN  tb_cls_room_equ re ON re.cls_room_cd = rm.cls_room_cd
			<if test="(searchText != null) and (!searchText.equals(''))">
				<choose>
					<when test="searchSel eq 'title'.toString()">
						where rm.cls_room_nm Like CONCAT('%', #{searchText}, '%')
					</when>
					<when test="searchSel eq 'useYN'.toString()">
						where rm.cls_room_use_yn Like CONCAT('%', #{searchText}, '%')
					</when>
					<otherwise>
						where rm.cls_room_nm Like CONCAT('%', #{searchText}, '%')
					</otherwise>
				</choose>
			</if>
	    GROUP BY rm.cls_room_cd
		order by cls_room_cd
		LIMIT #{startPoint}, #{pageSize}
	</select> <!-- 8.셀렉문으로 셀렉 -->
	
		
	<!-- 장비사항 목록 총 갯수 조회 -->
	<select id="totalCnt" resultType="int">
		/*kr.happy.study.facadm.dao.RoomDao.totalCnt*/
			SELECT COUNT(cls_room_cd) as tot_Cnt
			FROM 	tb_cls_room
             
			<if test="(searchText != null) and (!searchText.equals(''))">
				<choose>
					<when test="searchSel eq 'title'.toString()">
						where cls_room_nm Like CONCAT('%', #{searchText}, '%')
					</when>
					<when test="searchSel eq 'useYN'.toString()">
						where cls_room_use_yn Like CONCAT('%', #{searchText}, '%')
					</when>
					<otherwise>
						where cls_room_nm Like CONCAT('%', #{searchText}, '%')
					</otherwise>
				</choose>
			</if>
	</select>	<!-- 10.셀렉문으로 카운터해서 데이터량 정하기 -->
		
 	
 	<!-- 장비사항 단건 조회 : 장비수정 클릭시-->
	<select id = "selectRoom" resultType = "kr.happyjob.study.facadm.model.RoomModel">
		SELECT rm.cls_room_cd
		     , rm.cls_room_nm
		     , rm.cls_room_size
		     , rm.cls_room_seat
		     , rm.cls_room_etc
		     , rm.cls_room_use_yn
             , COUNT(re.equ_cd) as cnt_equ
	  FROM     tb_cls_room rm
     LEFT JOIN tb_cls_room_equ re ON re.cls_room_cd = rm.cls_room_cd
	 WHERE rm.cls_room_cd = #{cls_room_cd} 
	  GROUP BY rm.cls_room_cd
	         
	</select> 
	
	
	<!-- 강의실 신규등록(저장) -->
	<insert id="insertRoom">
       <selectKey resultType="string" keyProperty="cls_room_cd" order="BEFORE">
              select cast((ifnull(max(cast(cls_room_cd as unsigned)) ,0) + 1) as char(20)) 
               from tb_cls_room
        </selectKey>
			insert into tb_cls_room
			          (
			           cls_room_cd
		       		 , cls_room_nm
		       		 , cls_room_size
		         	 , cls_room_seat
		       	 	 , cls_room_etc
		       		 , cls_room_use_yn
			          )
	                  values (
	                      #{cls_room_cd}
	                     ,#{cls_room_nm}
	                     ,#{cls_room_size} 
	                     ,#{cls_room_seat} 
	                     ,#{cls_room_etc} 
	                     ,#{cls_room_use_yn} 
	                  )
	</insert>
	
	<!-- 정보 수정 -->
	<update id="updateRoom">
	       update tb_cls_room
	            set  cls_room_cd = #{cls_room_cd} 
	               , cls_room_nm = #{cls_room_nm}
	               , cls_room_size = #{cls_room_size}
	               , cls_room_seat = #{cls_room_seat}
	               , cls_room_etc = #{cls_room_etc}
                   , cls_room_use_yn = #{cls_room_use_yn} 
	        where cls_room_cd = #{cls_room_cd};
	</update> 

	<!-- 삭제 -->
    <delete 	id="deleteRoom">
		delete from tb_cls_room where cls_room_cd = #{cls_room_cd};
    </delete> 
    
    
   <!-- /////////////////////////여기서 부터 상세  -->
	<select id="listRoomDtl" resultType="kr.happyjob.study.facadm.model.RoomDtlModel">
	/*kr.happy.study.facadm.dao.RoomDao.listRoomDtl*/
	SELECT 	re.cls_room_cd
		  , ro.cls_room_nm as cls_room_nm
		  , re.equ_cd
		  , eq.equ_nm as equ_nm
	 	  , re.use_cnt
	 	  , re.etc
	      , eq.equ_able_cnt
	 FROM   tb_cls_room_equ re
	 INNER JOIN tb_cls_room ro ON re.cls_room_cd = ro.cls_room_cd
   	 INNER JOIN tb_equ_list eq ON re.equ_cd = eq.equ_cd
   	 WHERE re.cls_room_cd = ${cls_room_cd}
   	 LIMIT #{pageIndex}, #{pageSize}

	</select>
	
	<!-- 상세페이지 갯수 세기  -->
	<select id="totalCntDtl" resultType="int">
	/*kr.happy.study.facadm.dao.RoomDao.totalCntDtl*/
	SELECT count(cls_room_cd)
			 FROM   tb_cls_room_equ
   	 WHERE cls_room_cd = ${cls_room_cd}

	</select>
	
	<!--  장비내역 단건 조회 -->
	<select id = "selectRoomDtl" resultType = "kr.happyjob.study.facadm.model.RoomDtlModel">
	/*kr.happy.study.facadm.dao.RoomDao.selectRoomDtl*/
	SELECT 	re.cls_room_cd
		  , ro.cls_room_nm as cls_room_nm
		  , re.equ_cd
		  , eq.equ_nm as equ_nm
	 	  , re.use_cnt
	 	  , re.etc
	      , eq.equ_able_cnt
	 FROM   tb_cls_room_equ re
	 INNER JOIN tb_cls_room ro ON re.cls_room_cd = ro.cls_room_cd
   	 INNER JOIN tb_equ_list eq ON re.equ_cd = eq.equ_cd
   	 WHERE re.equ_cd = ${equ_cd}
	   AND re.cls_room_cd = ${cls_room_cd}
	</select> 
<!--  PK 중복 확인 --> 
	<select id = "dupEquCheck" resultType = "int">
	/*kr.happy.study.facadm.dao.RoomDao.dupEquCheck*/
	SELECT 	count(equ_cd)
	 FROM   tb_cls_room_equ
   	 WHERE equ_cd = ${equ_cd}
	   AND cls_room_cd = ${cls_room_cd}
	</select>
<!--  장비 사용가능 수량 조회--> 
	<select id = "getAbleCnt" resultType = "int">
	/*kr.happy.study.facadm.dao.RoomDao.getAbleCnt*/
	SELECT 	equ_able_cnt
	 FROM   tb_equ_list
   	 WHERE equ_cd = ${equ_cd}
	</select>
	
	<!-- 장비 내역 1건 저장  -->
	<insert id="insertRoomDtl">
	/*kr.happy.study.facadm.dao.RoomDao.insertRoomDtl*/
			insert into tb_cls_room_equ
			          (
			           cls_room_cd
		       		 , equ_cd
		       		 , use_cnt
		         	 , etc
			          )
	                  values (
	                      #{cls_room_cd}
	                     ,#{equ_cd}
	                     ,#{use_cnt} 
	                     ,#{etc} 
	                  )
	</insert> 
	<!-- 장비 내역 1건 신규 저장시 총수량 조절  -->	
	<update id="insertAbleRoom">
	/*kr.happy.study.facadm.dao.RoomDao.insertAbleRoom*/
		UPDATE tb_equ_list
		   SET equ_use_cnt = equ_use_cnt + (cast(#{use_cnt} as unsigned))
		     , equ_able_cnt = equ_able_cnt - (cast(#{use_cnt} as unsigned))
		 WHERE equ_cd = #{equ_cd};
	</update>
	
	<!-- 장비 내역 1건 수정  -->
	<update id="updateRoomDtl">
	/*kr.happy.study.facadm.dao.RoomDao.updateRoomDtl*/
		UPDATE tb_cls_room_equ
		   SET use_cnt = #{use_cnt} 
		     , etc = #{etc}
		 WHERE equ_cd = #{equ_cd}
		   AND cls_room_cd = #{cls_room_cd}
	</update>
	
	<!-- 장비 내역 1건 수정시 전체 수량 조절 -->
	<update id="updateAbleRoom">
	/*kr.happy.study.facadm.dao.RoomDao.updateAbleRoom*/
		update tb_equ_list 
		SET    equ_use_cnt = (select sum(use_cnt) from tb_cls_room_equ where equ_cd = #{equ_cd})
		     , equ_able_cnt = equ_total_cnt - equ_use_cnt - equ_unable_cnt
		 WHERE equ_cd = #{equ_cd}
	</update>

	<!-- 장비 내역 1건 삭제 -->
	<update id="deleteRoomDtl">
	/*kr.happy.study.facadm.dao.RoomDao.deleteRoomDtl*/
		DELETE FROM tb_cls_room_equ
		 WHERE equ_cd = #{equ_cd}
		   AND cls_room_cd = #{cls_room_cd}
	</update> 
	
	<!-- 장비 내역 1건 수정시 전체 수량 조절 -->
	<update id="deleteAbleRoom">
	/*kr.happy.study.facadm.dao.RoomDao.deleteAbleRoom*/
		update tb_equ_list
		   SET equ_use_cnt = (select sum(use_cnt) from tb_cls_room_equ where equ_cd = #{equ_cd})
		     , equ_able_cnt = equ_total_cnt - equ_use_cnt - equ_unable_cnt
		 WHERE equ_cd = #{equ_cd}
	</update> 
	<!-- 강의실 강의중 확인 -->
	<select id = "usingRoomCheck" resultType = "int">
	/*kr.happy.study.facadm.dao.RoomDao.usingRoomCheck*/
		SELECT COUNT(lec_Cd)
		FROM tb_lec
		WHERE cls_room = #{cls_room_nm}
		AND lec_yn = 'N';
	</select>
	
</mapper>

